from typing import Callable

import pluggy
from py.path import LocalPath
from typing_extensions import Protocol

from tox.config import Config, Parser, TestenvConfig
from tox.session import Action
from tox.venv import VirtualEnv

hookspec: pluggy.HookspecMarker
@hookspec
def tox_addoption(parser: Parser) -> None: ...
@hookspec
def tox_configure(config: Config) -> None: ...
@hookspec(firstresult=True)
def tox_get_python_executable(envconfig: TestenvConfig) -> LocalPath: ...
@hookspec(firstresult=True)
def tox_testenv_create(venv: VirtualEnv, action: Action) -> None: ...
@hookspec(firstresult=True)
def tox_testenv_install_deps(venv: VirtualEnv, action: Action) -> None: ...
@hookspec
def tox_runtest_pre(venv: VirtualEnv) -> None: ...
@hookspec(firstresult=True)
def tox_runtest(venv: VirtualEnv, redirect: bool) -> None: ...
@hookspec
def tox_runtest_post(venv: VirtualEnv) -> None: ...
@hookspec(firstresult=True)
def tox_runenvreport(venv: VirtualEnv, action: Action):
    pass

class ToxHookRelay(Protocol):
    tox_addoption: Callable[[Parser], None] = ...
    tox_configure: Callable[[Config], None] = ...
    tox_get_python_executable: Callable[[TestenvConfig], LocalPath] = ...
    tox_testenv_create: Callable[[VirtualEnv, Action], None] = ...
    tox_testenv_install_deps: Callable[[VirtualEnv, Action], None] = ...
    tox_runtest_pre: Callable[[VirtualEnv], None] = ...
    tox_runtest: Callable[[VirtualEnv, bool], None] = ...
    tox_runtest_post: Callable[[VirtualEnv], None] = ...
    tox_runenvreport: Callable[[VirtualEnv, Action], None] = ...
