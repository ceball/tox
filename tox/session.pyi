# Stubs for tox.session (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
import py
import subprocess
from io import IOBase, TextIOBase
from py.path import LocalPath
from typing import Any, Dict, List, Optional, Pattern, Sequence, Type, Union

from tox._verlib import NormalizedVersion
from tox.config import Config
from tox.hookspecs import ToxHookRelay
from tox.result import ResultLog
from tox.venv import VirtualEnv
def prepare(args: Sequence[str]) -> Config: ...
def cmdline(args: Optional[Sequence[str]]) -> None: ...
def main(args: Sequence[str]) -> None: ...
def show_help(config: Config) -> None: ...
def show_help_ini(config: Config) -> None: ...

class Action:
    venv: Optional[VirtualEnv] = ...
    msg: str = ...
    session: Session = ...
    args: Sequence[Union[LocalPath, str]] = ...
    id: str = ...
    _popenlist: List[subprocess.Popen] = ...
    venvname: str = ...
    commandlog: Any = ...
    activity: str = ...
    report: Reporter = ...
    def __init__(
        self, session: Session, venv: VirtualEnv, msg: str, args: Sequence[Union[str, LocalPath]]
    ) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, *args: Any) -> None: ...
    def setactivity(self, name: str, msg: str) -> None: ...
    def info(self, name: str, msg: str) -> None: ...
    def _initlogpath(self, actionid: str) -> TextIOBase: ...
    def popen(
        self,
        args: Sequence[str],
        cwd: Optional[LocalPath] = ...,
        env: Optional[Dict[str, str]] = ...,
        redirect: bool = ...,
        returnout: bool = ...,
        ignore_ret: bool = ...,
    ) -> str: ...
    def _rewriteargs(self, cwd: LocalPath, args: Sequence[str]) -> Sequence[str]: ...
    def _popen(
        self,
        args: Sequence[str],
        cwd: LocalPath,
        stdout: Union[int, IOBase],
        stderr: Union[int, IOBase],
        env: Optional[Dict[str, str]] = ...,
    ) -> subprocess.Popen: ...

class Verbosity:
    DEBUG: int = ...
    INFO: int = ...
    DEFAULT: int = ...
    QUIET: int = ...
    EXTRA_QUIET: int = ...

class Reporter:
    actionchar: str = ...
    tw: py.io.TerminalWriter = ...
    session: Session = ...
    _reportedlines: List[str] = ...
    def __init__(self, session: Session) -> None: ...
    @property
    def verbosity(self) -> int: ...
    def logpopen(self, popen: subprocess.Popen, env: VirtualEnv) -> None: ...
    def logaction_start(self, action: Action) -> None: ...
    def logaction_finish(self, action: Action) -> None: ...
    def startsummary(self) -> None: ...
    def info(self, msg: str) -> None: ...
    def using(self, msg: str) -> None: ...
    def keyboard_interrupt(self) -> None: ...
    def keyvalue(self, name: str, value: str) -> None: ...
    def line(self, msg: str, **opts: Any) -> None: ...
    def good(self, msg: str) -> None: ...
    def warning(self, msg: str) -> None: ...
    def error(self, msg: str) -> None: ...
    def skip(self, msg: str) -> None: ...
    def logline(self, msg: str, **opts: Any) -> None: ...
    def verbosity0(self, msg: str, **opts: Any) -> None: ...
    def verbosity1(self, msg: str, **opts: Any) -> None: ...
    def verbosity2(self, msg: str, **opts: Any) -> None: ...

class Session:
    config: Config = ...
    popen: subprocess.Popen = ...
    resultlog: ResultLog = ...
    report: Reporter = ...
    _spec2pkg: Dict[str, str] = ...
    _name2venv: Dict[str, VirtualEnv] = ...
    venvlist: List[str] = ...
    _actions: List[Action] = ...
    def __init__(
        self, config: Config, popen: subprocess.Popen = ..., Report: Type[Reporter] = ...
    ) -> None: ...
    @property
    def hook(self) -> ToxHookRelay: ...
    def _makevenv(self, name: str) -> VirtualEnv: ...
    def getvenv(self, name: str) -> VirtualEnv: ...
    def newaction(self, venv: Optional[VirtualEnv], msg: str, *args: Any) -> Action: ...
    def runcommand(self) -> Optional[int]: ...
    def _copyfiles(self, srcdir: LocalPath, pathlist: List[str], destdir: LocalPath) -> None: ...
    def _makesdist(self) -> None: ...
    def make_emptydir(self, path: LocalPath) -> None: ...
    def setupenv(self, venv: VirtualEnv) -> Optional[bool]: ...
    def finishvenv(self, venv: VirtualEnv) -> Optional[bool]: ...
    def developpkg(self, venv: VirtualEnv, setupdir: LocalPath) -> bool: ...
    def installpkg(self, venv: VirtualEnv, path: LocalPath) -> bool: ...
    def get_installpkg_path(self) -> LocalPath: ...
    def subcommand_test(self) -> int: ...
    def runtestenv(self, venv: VirtualEnv, redirect: bool = ...) -> None: ...
    def _summary(self) -> int: ...
    def showconfig(self) -> None: ...
    def showenvs(self, all_envs: bool = ..., description: bool = ...) -> None: ...
    def info_versions(self) -> None: ...
    def _resolve_pkg(self, pkgspec: str) -> LocalPath: ...
    def _resolvepkg(self, pkgspec: str) -> LocalPath: ...

_rex_getversion: Pattern
def getversion(basename: str) -> Optional[NormalizedVersion]: ...
