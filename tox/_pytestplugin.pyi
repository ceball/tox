from io import TextIOBase
from typing import Any, Callable, Dict, Generator, List, Optional, Sequence, Tuple, Type, Union

import pytest
from _pytest.capture import CaptureFixture
from _pytest.config import Parser
from _pytest.fixtures import SubRequest
from _pytest.mark import MarkDecorator
from _pytest.monkeypatch import MonkeyPatch
from py._path.local import LocalPath

from tox.config import Config
from tox.result import ResultLog
from tox.session import Action, Session
from tox.venv import VirtualEnv

mark_dont_run_on_windows: MarkDecorator = ...
mark_dont_run_on_posix: MarkDecorator = ...
def pytest_configure() -> None: ...
def pytest_addoption(parser: Parser) -> None: ...
def pytest_report_header() -> str: ...
@pytest.fixture
def work_in_clean_dir(tmpdir: LocalPath) -> Generator[None, None, None]: ...
def _create_new_config_file_(
    tmpdir: LocalPath,
    args: Sequence[str],
    source: Optional[str] = ...,
    plugins: Tuple[Any, ...] = ...,
) -> Config: ...
@pytest.fixture(name=...)
def create_new_config_file(
    tmpdir: LocalPath
) -> Callable[[Sequence[str], Optional[str], Tuple[Any, ...]], Config]: ...
@pytest.fixture
def cmd(
    request: SubRequest, capfd: CaptureFixture, monkeypatch: MonkeyPatch
) -> Generator[Callable[[Sequence[str]], RunResult], None, None]: ...

class RunResult:
    _capfd: CaptureFixture = ...
    _start: float = ...

    args: Sequence[str] = ...
    ret: Optional[int] = ...
    duration: float = ...
    out: str = ...
    err: str = ...
    def __init__(self, capfd: CaptureFixture, args: Sequence[str]) -> None: ...
    def __enter__(self) -> Any: ...
    def __exit__(self, exc_type: Type, exc_val: Any, exc_tb: Any) -> None: ...
    @property
    def outlines(self) -> Sequence[str]: ...
    def __repr__(self) -> str: ...

class ReportExpectMock:
    _calls: List[Tuple[str, ...]] = ...
    _index: int = ...
    session: MockSession = ...
    def __init__(self, session: Session) -> None: ...
    def clear(self) -> None: ...
    def __getattr__(
        self, name: str
    ) -> Union[int, Callable[[Sequence[str], Dict[str, Any]], None]]: ...
    def getnext(self, cat: str) -> Tuple[str, ...]: ...
    def expect(self, cat: str, messagepattern: str = ..., invert: bool = ...) -> None: ...
    def not_expect(self, cat: str, messagepattern: str = ...) -> None: ...

class pcallMock:
    arg0: str = ...
    args: Sequence[str] = ...
    cwd: str = ...
    env: Dict[str, str] = ...
    stdout: Union[None, int, TextIOBase] = ...
    stderr: Union[None, int, TextIOBase] = ...
    shell: Optional[bool] = ...
    def __init__(
        self,
        args: Sequence[str],
        cwd: str,
        env: Dict[str, str],
        stdout: Union[None, int, TextIOBase],
        stderr: Union[None, int, TextIOBase],
        shell: bool,
    ) -> None: ...
    @staticmethod
    def communicate() -> str: ...
    def wait(self) -> None: ...

class MockSession(Session):
    config: Config = ...
    resultlog: ResultLog = ...
    _actions: List[Action] = ...
    _pcalls: List[pcallMock] = ...
    def __init__(self, request: SubRequest) -> None: ...
    def getenv(self, name: str) -> VirtualEnv: ...
    def _clearmocks(self) -> None: ...
    def popen(
        self,
        args: Sequence[str],
        cwd: str,
        shell: Optional[bool] = ...,  # type: ignore
        stdout: Union[None, int, TextIOBase] = ...,
        stderr: Union[None, int, TextIOBase] = ...,
        env: Optional[Dict[str, str]] = ...,
        **_: Any
    ) -> pcallMock: ...

@pytest.fixture(name=...)
def create_mocksession(request: SubRequest) -> MockSession: ...
def _newmocksession(
    newconfig: Callable[[Sequence[str], Optional[str], Tuple[Any, ...]], Config],
    mocksession: MockSession,
    args: Sequence[str],
    source: Optional[str],
    plugins: Tuple[Any, ...] = ...,
) -> MockSession: ...
@pytest.fixture
def newmocksession(
    mocksession: MockSession,
    newconfig: Callable[[Sequence[str], Optional[str], Tuple[Any, ...]], Config],
) -> Callable[[Sequence[str], Optional[str], Tuple[Any, ...]], Config]: ...
def getdecoded(out: bytes) -> str: ...
@pytest.fixture
def initproj(tmpdir: LocalPath) -> None: ...
def _path_parts(path: str) -> Sequence[str]: ...
def _path_join(base: LocalPath, *args: str) -> LocalPath: ...
def _filedefs_contains(
    base: LocalPath, filedefs: Dict[str, Any], path: str
) -> Union[bool, Sequence[str]]: ...
def create_files(base: LocalPath, filedefs: Dict[str, Any]) -> None: ...
