from typing import Optional
def exit_code_str(exception_name: str, command: str, exit_code: Optional[int]) -> str: ...

class Error(Exception):
    def __str__(self) -> str: ...

class MissingSubstitution(Error):
    FLAG: str = ...
    name: str = ...
    def __init__(self, name: str) -> None: ...

class ConfigError(Error): ...
class UnsupportedInterpreter(Error): ...
class InterpreterNotFound(Error): ...

class InvocationError(Error):
    command: str = ...
    exit_code: Optional[int] = ...
    def __init__(self, command: str, exit_code: Optional[int] = ...) -> None: ...
    def __str__(self) -> str: ...

class MissingFile(Error): ...
class MissingDirectory(Error): ...
class MissingDependency(Error): ...

class MinVersionError(Error):
    message: str = ...
    def __init__(self, message: str) -> None: ...
