# Stubs for tox.venv (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
import subprocess
from typing import Dict, List, Match, Optional, Sequence

from py.path import LocalPath

import tox
from tox.hookspecs import ToxHookRelay
from tox.session import Action, Session
from .config import TestenvConfig

class CreationConfig:
    md5: str = ...
    python: LocalPath = ...
    version: str = ...
    sitepackages: bool = ...
    usedevelop: bool = ...
    alwayscopy: bool = ...
    deps: List[str] = ...
    def __init__(
        self,
        md5: str,
        python: LocalPath,
        version: str,
        sitepackages: bool,
        usedevelop: bool,
        deps: List[str],
        alwayscopy: bool,
    ) -> None: ...
    def writeconfig(self, path: LocalPath) -> None: ...
    @classmethod
    def readconfig(cls, path: LocalPath) -> CreationConfig: ...
    def matches(self, other: CreationConfig) -> bool: ...

class VirtualEnv:
    envconfig: TestenvConfig = ...
    session: Session = ...
    def __init__(
        self, envconfig: Optional[TestenvConfig] = ..., session: Optional[Session] = ...
    ) -> None: ...
    @property
    def hook(self) -> ToxHookRelay: ...
    @property
    def path(self) -> LocalPath: ...
    @property
    def path_config(self) -> LocalPath: ...
    @property
    def name(self) -> str: ...
    def __repr__(self) -> str: ...
    def getcommandpath(
        self, name: str, venv: bool = ..., cwd: Optional[LocalPath] = ...
    ) -> str: ...
    def _venv_lookup_and_check_external_whitelist(self, name: str) -> LocalPath: ...
    def _venv_lookup(self, name: str) -> LocalPath: ...
    def _normal_lookup(self, name: str) -> LocalPath: ...
    def _check_external_allowed_and_warn(self, path: LocalPath) -> None: ...
    def is_allowed_external(self, p: LocalPath) -> bool: ...
    just_created: bool = ...
    def update(self, action: Action) -> str: ...
    def _getliveconfig(self) -> CreationConfig: ...
    def _getresolvedeps(self) -> List[str]: ...
    def getsupportedinterpreter(self) -> LocalPath: ...
    def matching_platform(self) -> Match: ...
    def finish(self) -> None: ...
    def _needs_reinstall(self, setupdir: LocalPath, action: Action) -> bool: ...
    def developpkg(self, setupdir: LocalPath, action: Action) -> None: ...
    def installpkg(self, sdistpath: LocalPath, action: Action) -> None: ...
    def _installopts(self, indexserver: str) -> List[str]: ...
    def run_install_command(
        self, packages: List[LocalPath], action: Action, options: List[str] = ...
    ) -> None: ...
    def _install(
        self, deps: List[str], extraopts: Optional[List[str]] = ..., action: Optional[Action] = ...
    ) -> None: ...
    def _getenv(self, testcommand: bool = ...) -> Dict[str, str]: ...
    status: int = ...
    def test(self, redirect: bool = ...) -> None: ...
    def _pcall(
        self,
        args: Sequence[str],
        cwd: LocalPath,
        venv: bool = ...,
        testcommand: bool = ...,
        action: Optional[Action] = ...,
        redirect: bool = ...,
        ignore_ret: bool = ...,
    ) -> subprocess.Popen: ...

def getdigest(path: LocalPath) -> str: ...
@tox.hookimpl
def tox_testenv_create(venv: VirtualEnv, action: Action) -> Optional[bool]: ...
@tox.hookimpl
def tox_testenv_install_deps(venv: VirtualEnv, action: Action) -> Optional[bool]: ...
@tox.hookimpl
def tox_runtest(venv: VirtualEnv, redirect: bool) -> Optional[bool]: ...
@tox.hookimpl
def tox_runenvreport(venv: VirtualEnv, action: Action) -> List[str]: ...
